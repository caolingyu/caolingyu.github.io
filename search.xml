<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github 如何fork后更新内容</title>
    <url>/2017/07/08/Github-%E5%A6%82%E4%BD%95fork%E5%90%8E%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p>在github上fork了一个仓库以后更新内容的方法</p>
<span id="more"></span>
<ul>
<li>给fork配置远程库<ul>
<li>使用<br>  <code>git remote -v</code><br>  查看远程状态</li>
<li>确定一个将被同步给fork远程的上游仓库<br>  <code>git remote add upstream URL</code>  </li>
<li>再次查看状态确认是否配置成功</li>
</ul>
</li>
<li>同步fork<ul>
<li>从上游仓库fetch分支和提交点，提交给本地master，并会被存储在一个本地分支upstream&#x2F;master<br>  <code>git fetch upstream</code>  </li>
<li>切换到本地主分支（如果不在的话）<br>  <code>git checkout master</code>  </li>
<li>把upstream&#x2F;master分支合并到本地master上，这样就完成了同步，并且不会丢掉本地修改的内容<br>  <code>git merge upstream/master</code>  </li>
<li>如果想更新到github的fork上<br>  <code>git push origin master</code></li>
</ul>
</li>
</ul>
<p>Reference: <a href="https://www.zhihu.com/question/28676261">知乎</a></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab服务器的备份和迁移</title>
    <url>/2018/06/18/Gitlab%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>之前在一台Ubuntu的服务器上搭建了一个Gitlab服务器，最近这台服务器即将被回收，所以需要将原来的Gitlab迁移到新的服务器上，由于我是用Omnibus安装的，备份和还原的步骤相对来说比较简单，但也有不少需要注意的点。</p>
<p>首先说一下环境和版本  </p>
<ul>
<li>系统：Ubuntu 16.04</li>
<li>Gitlab版本：gitlab-ee_10.7.0-ee.0_amd64</li>
<li>安装方法：Omnibus</li>
</ul>
<p>大致流程如下  </p>
<ol>
<li>在原服务器执行备份</li>
<li>在新服务器安装<strong>相同版本</strong>的Gitlab</li>
<li>将原服务器的备份传输到新服务器</li>
<li>执行还原命令</li>
<li>Done</li>
</ol>
<p>在原服务器进行备份相当简单，只需要执行以下命令<br><code>gitlab-rake gitlab:backup:create</code><br>默认的备份位置是&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups，由于原服务器这个分区的空间已经不足了，所以在备份的时候出现报错，这里顺便提一下，第一次报错以后我把backups文件夹删除又创建了，再执行备份命令的时候提示权限不够，执行以下命令可以解决  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown git /var/opt/gitlab/backups</span><br><span class="line">chmod 700 /var/opt/gitlab/backups</span><br></pre></td></tr></table></figure>
<p>磁盘空间不足的问题可以通过修改备份的保存位置解决<br>打开&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb文件，找到这一行<br><code>default[&#39;gitlab&#39;][&#39;gitlab-rails&#39;][&#39;backup_path&#39;] = &quot;/var/opt/gitlab/backups&quot;</code><br>修改后面的路径以后reconfigure一下再备份即可  </p>
<p>在新服务器上安装完gitlab以后，执行以下命令进行还原  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl stop unicorn</span><br><span class="line">sudo gitlab-ctl stop sidekiq</span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=&#x27;your_backup_file&#x27;</span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<p>如果要备份和还原配置文件的话只需要将&#x2F;etc&#x2F;gitlab文件夹打包传输到新服务器，解压放到新服务器相同的目录下。可以将新gitlab产生的配置文件夹备份一下以备不时之需。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Happy Birthday</title>
    <url>/2017/05/28/Happy-Birthday/</url>
    <content><![CDATA[<p>祝我生日快乐~继续加油！</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/2017/05/21/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Markdown语法介绍</p>
<span id="more"></span>
<h1 id="欢迎使用-Cmd-Markdown-编辑阅读器"><a href="#欢迎使用-Cmd-Markdown-编辑阅读器" class="headerlink" title="欢迎使用 Cmd Markdown 编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>
<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows&#x2F;Mac&#x2F;Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/">Windows&#x2F;Mac&#x2F;Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-%E5%BE%85%E5%8A%9E%E4%BA%8B%E5%AE%9C-todo-%E5%88%97%E8%A1%A8">Todo 列表</a></h3><ul>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input checked="" disabled="" type="checkbox"> 新增 Todo 列表功能</li>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E&#x3D;mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-%E6%B5%81%E7%A8%8B%E5%9B%BE">流程图</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>

<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-%E5%BA%8F%E5%88%97%E5%9B%BE">序列图</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>

<h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-%E7%94%98%E7%89%B9%E5%9B%BE">甘特图</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>

<h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑&#x2F;发布&#x2F;阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统&#x2F;设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通&#x2F;Vim&#x2F;Emacs 编辑模式</p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert">@ghosert</a><br>2016 年 07月 07日</p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i&#x3D;1}^n a_i&#x3D;0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Msc Project的一些思路</title>
    <url>/2017/05/23/Msc-Project%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p>这篇文章主要讲一下我研究生毕业论文的思路</p>
<span id="more"></span>
<p>期末考试结束，研究生生涯就剩下一个项目和论文了。</p>
<p>项目的题目是<em>Workflows for analysis of neuronal high density multielectrode array recordings</em>。听起来很高大上，但是实际上只需要将现有的一个GUI进行修改。</p>
<p><a href="https://github.com/caolingyu/herding-spikes">项目repo</a></p>
<p>在和导师聊了两次以后，有了一个大致的思路…</p>
<ul>
<li><p>原先是读取cluster过的数据，需要在GUI中集成clustering的功能，以便直接读取原始数据</p>
</li>
<li><p>加入对数据clustering过程中参数的设置，以及添加subsetting功能，以便对原始数据的某一子集进行clustering</p>
</li>
<li><p>对主视图的某一部分选中并重新clustering</p>
</li>
<li><p>对PCA和waveform显示窗口进行改进</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyQt</tag>
      </tags>
  </entry>
  <entry>
    <title>NEXT主题的一处小瑕疵</title>
    <url>/2017/05/22/NEXT%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E5%A4%84%E5%B0%8F%E7%91%95%E7%96%B5/</url>
    <content><![CDATA[<p>在使用NEXT主题中发现的一处小瑕疵，研究以后发现了解决方法</p>
<span id="more"></span>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>昨天把Hexo部署好并且安装了NEXT主题，整体感觉非常棒。然而今天想测试一下标签和分类功能的时候，发现了一处小bug。如下图所示：</p>
<p><img src="http://caolingyu.me/images/post3_1.png" alt="Pic"></p>
<p>强迫症的我表示完全不能忍，遂百度谷歌一通搜索，然而无果。</p>
<p>于是来到了NEXT的github仓库，想在issue里看一下有没有人提问，万万没想到竟然没有人提出类似的问题！莫非这是一个新版本更新造成的新bug？</p>
<p>再看了几个使用同样主题的博客以后，我发现他们均未出现此问题，万般无奈之下，只能开始琢磨源代码！</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125;: &#123;&#123; page.category &#125;&#125; | &#123;&#123; config.title &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;section id=&quot;posts&quot; class=&quot;posts-collapse&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;collection-title&quot;&gt;</span><br><span class="line">      &lt;&#123;% if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;&#123;#</span><br><span class="line">      #&#125;&#123;&#123; page.category &#125;&#125;&#123;#</span><br><span class="line">      #&#125;&lt;small&gt;&#123;&#123;  __(&#x27;title.category&#x27;)  &#125;&#125;&lt;/small&gt;</span><br><span class="line">      &lt;/&#123;% if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>以上代码来自<strong>layout&#x2F;category.swig</strong>这个文件。同一目录下的<strong>tag.swig</strong>也包含类似的代码。问题就在于这段代码里的h1和h2。接下来找到<strong>source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;post-collapse.styl</strong>这个文件，发现里面含有<code>h2 &#123; margin-left: 20px; &#125;</code>这行代码，但是并没有定义h1。我想这应该就是造成这个问题的原因。于是我加入了<code>h1 &#123; margin-left: 20px; &#125;</code>。果然问题迎刃而解！如下图：</p>
<p><img src="http://caolingyu.me/images/post3_2.png" alt="Pic"></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>NEXT</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch--从安装到使用</title>
    <url>/2018/06/14/elasticsearch-%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>最近在做一个实体链接的项目，主要是先用命名实体识别的模型去识别文本中的特定实体，然后再将识别出来的实体链接到知识图谱中对应的节点。之所以要这么做是因为往往识别出来的实体名字并不和图谱中的节点完全对应。关于实体链接的具体细节在这里不多赘述，因为不是本文的重点，大致就是对每个识别出的实体从图谱中选出一些候选节点，计算相似度然后选最相似的。  </p>
<p>这里主要说一下挑选候选节点这一步，之所以要用到elasticsearch，是因为我们的图谱目前还不支持模糊搜索，而es的match提供了很好的模糊搜索功能，并且还能给每个结果打分。</p>
<p>我的系统是macOS 10.13.5，安装的es版本是5.6.4。在macOS上有两种主流的安装方法，一种是从官网直接下载压缩包，另一种是用homebrew安装，本文使用的是前一种方法。<br>首先去<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-5-6-4">官网</a>下载对应版本，下载解压缩完以后我把放在用户根目录下，所以路径是~&#x2F;elasticsearch-5.6.4&#x2F;，这时候其实已经可以运行了，执行elasticsearch-5.6.4&#x2F;bin&#x2F;elasticsearch就可以启动es。但是有一个问题，es默认的analyzer对中文的分词不是很友好，往往会在搜索的时候把中文分成一个个字，这显然不是我们想要的，好在有ik插件，解决了这个问题。安装ik插件也有两种方法，一种是手动从官网下载安装包放到指定文件夹，另一种可以用elasticsearch-plugin命令来安装（需要安装5.5.1版本以上的es）<br><code>./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.4/elasticsearch-analysis-ik-5.6.4.zip</code><br>因为我安装的es高于5.5.1，所以我采用了这种方法，很方便。具体可以参考<a href="https://github.com/medcl/elasticsearch-analysis-ik#install">官方repo</a></p>
<p>接下来就是es的使用了，首先了解一下es中的索引，它是ES中的一个存储类型，与数据库类似，内部包含类型字段，类型中包含各种文档。如果和关系型数据库进行类比的话，索引就是数据库，类型就是数据库中的表，文档就是每张表中的每一行记录。<br>下面介绍一些常用的操作  </p>
<ul>
<li><p>查看所有索引<br><code>curl &#39;localhost:9200/_cat/indices?v&#39;</code>  </p>
</li>
<li><p>创建一个名为country的索引<br><code>curl -XPUT &#39;localhost:9200/country?pretty&#39;</code>  </p>
</li>
<li><p>在country中设置一个名为city的类型，并写入一条数据  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -XPUT &#x27;localhost:9200/country/city/1?pretty&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;London&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -XGET &#x27;localhost:9200/country/city/1?pretty&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;country&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;city&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;found&quot; : true, &quot;_source&quot; : &#123; &quot;name&quot;: &quot;London&quot; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除索引<br><code>curl -XDELETE &#39;localhost:9200/customer?pretty&#39;</code></p>
</li>
</ul>
<p>另外如果需要在python中使用es，可以参考以下文章  </p>
<ul>
<li><a href="https://www.cnblogs.com/yxpblog/p/5141738.html">python操作Elasticsearch (一、例子)</a>  </li>
<li><a href="https://www.cnblogs.com/cswuyg/p/5651620.html">Elasticsearch使用备忘</a>  </li>
<li><a href="https://blog.csdn.net/YHYR_YCY/article/details/78882011">基于Python操作ElasticSearch</a><br>还有一篇讲解es中的映射和分析的，我觉得写的也不错  </li>
<li><a href="https://blog.csdn.net/hzrandd/article/details/47128895">ElasticSearch映射和分析</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10+Ubuntu双系统卸载Ubuntu</title>
    <url>/2017/05/24/Win10-Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%8D%B8%E8%BD%BDUbuntu/</url>
    <content><![CDATA[<p>安装Windows10和Ubuntu双系统以后卸载Ubuntu的方法</p>
<span id="more"></span>
<p>之前跑Machine translation深度学习训练时候在我平时打游戏的独显笔记本上安装了Ubuntu双系统，用的是UEFI的启动方法。</p>
<p>跑完任务以后发现Ubuntu出了点问题…于是决定卸载了。由于遇到了一些坑，所以在这里记录一下。</p>
<ol>
<li>首先打开windows的磁盘工具将Ubuntu的四个分区中能格式化的三个全部格式化，剩下的那个就是比较难搞的UEFI启动项。</li>
<li>接下来按win键+R，在运行窗口里输入Diskpart。</li>
<li>进入命令行以后首先输入<code>list disk</code>，就会看到可选的磁盘，由于我将Ubuntu装在磁盘1上，所以输入<code>select disk 1</code>选择磁盘1。接下来输入<code>list partition</code>来显示这个磁盘有哪些分区，要删除的分区应该可以根据容量大小判断出来，于是输入<code>select partition X</code>。最后输入<code>delete partition override</code>从而删除该分区。</li>
<li>删除了分区以后可以再打开磁盘工具进行确认。然后使用easyUEFI软件删除Ubuntu的启动项即可。</li>
</ol>
<p>–</p>
<p>Reference: <a href="http://blog.csdn.net/qq_28057541/article/details/51723914">CSDN博客</a> </p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Windows10</tag>
        <tag>双系统</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS使用vue-cli创建项目后修改默认打开浏览器</title>
    <url>/2018/04/10/macOS%E4%BD%BF%E7%94%A8vue-cli%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%90%8E%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<p>用vue-cli创建项目以后会用系统默认浏览器打开，我在mac上用safari作日常浏览器，开发调试一般用chrome，这里介绍一个修改npm run dev默认打开浏览器的方法</p>
<span id="more"></span>
<p><strong>打开项目文件夹中node_modules&#x2F;webpack-dev-server&#x2F;bin中的webpack-dev-server.js文件，找到openOptions，默认为{}，在其中添加app: ‘google chrome’。</strong></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在服务器上部署vue项目</title>
    <url>/2018/06/04/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>之前用vue-cli搭建了一个ICD编码和电子病历信息抽取的前端小工具，这里讲一下如何部署在服务器上</p>
<span id="more"></span>

<ol>
<li>在本地项目根目录下运行<br><code>npm run build</code>  </li>
<li>在ubuntu16.04服务器上用apt-get install nginx安装，这里遇到了一些问题，安装完以后报错无法启动，发现是因为服务器不支持IPV6，需要在配置文件里将相应的行注释掉</li>
<li>把dist里的文件和index.html打包上传至服务器上nginx目录下，我这里的&#x2F;var&#x2F;www&#x2F;，原本的nginx的root路径是&#x2F;var&#x2F;www&#x2F;html，这里修改为&#x2F;var&#x2F;www&#x2F;frontend</li>
<li>浏览器访问<a href="http://server_ip/%E5%8D%B3%E5%8F%AF">http://server_ip/即可</a></li>
</ol>
<p>Reference: <a href="https://www.zhihu.com/question/46630687/answer/102284339">知乎</a></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>《好好说话2》节选</title>
    <url>/2024/05/28/%E5%A5%BD%E5%A5%BD%E8%AF%B4%E8%AF%9D-%E8%8A%82%E9%80%89/</url>
    <content><![CDATA[<p><strong>第一十二章 第一节　避开冲突危险区</strong></p>
<ul>
<li>顾虑之所以是顾虑，正是因为对方不太方便讲得太明白，只能让你自己去领悟。所以，当你第一反应觉得对方有意冷淡，甚至是有意刁难的时候，先别急着发火。想一想，有没有可能是对方心里存在你没有意识到的顾虑？帮对方打消这个顾虑，你们才能进行融洽的交流。</li>
</ul>
<p><strong>第一十四章 第三节　道歉的方式比道歉更重要</strong></p>
<ul>
<li>这样的表达，把说谎归咎于“自私”，比起你直接说“是因为你太强势”，或者“是因为我太胆小”要好得多。</li>
</ul>
<p><strong>第一十六章 第一节　破除困境的观念升级包</strong></p>
<ul>
<li>思维会被说话的方式影响。当你用“无我”的方式叙事时，你和听众的想法和注意力全都在对象身上，而没有你自己。因此，你的表述是表面和片面的，而且你的听众也只能跟你聊这个对象，话题受到了很大限制。可是，一旦你开始在讲话里代入“有我”的视角，你的叙事就会立体起来，你和听众能聊的东西也会更丰富。</li>
</ul>
<p><strong>第一十七章 第二节　1秒抓住别人的注意力</strong></p>
<ul>
<li>使用“基础模型”时，要特别注意，在别人理解了你想传达的大致观念之后，接下来就要强调细节上的区别。这样做，一来是突出你的新意，不跟原型混淆；二来也可以让对方的理解更为精准，避免先入为主的误解。比如，《异型》固然可以说是太空版的《大白鲨》，但是在跟美术设计谈怪物的造型时，一定要强调这毕竟是“太空版”，脑洞得开得更大才行。</li>
<li>总之，当你需要让别人认真思考，给你有建设性的意见的时候，可以给他设定一个身份。有了角色感，对方才知道该从哪个角度去看问题，知道应该关注什么、给出什么方向上的建议。</li>
</ul>
<p><strong>第一十八章 第三节　高效讨论决定沟通结果</strong></p>
<ul>
<li>更好的接话方法：“你这个想法很有意思……我试着补充一个角度……”</li>
<li>想要满足客户，<br>就不能被对方“想象中的需求”误导，<br>而必须找到他的“真实需求”。<br>〇•可能遇到的问题</li>
<li>常见的说法：“老板，我觉得您的计划需要的资金太多，而且也没事先做过调研，还要分析一下投入资金后，可以打败什么竞品。所以我觉得，这项计划不是很靠谱。”</li>
</ul>
<p><strong>第二十章 第一节　提要求不等于忍受尴尬</strong></p>
<ul>
<li>比如，催人还钱时可以这样问：“如果我要麻烦你把上次借走的一千块钱还给我，会不会让你很介意啊？”这时候，该不好意思的是对方而不是你。如果对方表示介意，你也可以把他的话接过来说：“我就是怕你会尴尬，所以之前才一直都不好意思跟你提，但我想，一直不讲也不是个办法吧！”</li>
<li>在亲密关系里，重点从来都不是“提要求”，而是“给甜头”。因为无论如何，对方是希望你开心的。所以你只要表达自己在什么情况下，会因为什么而开心，就能引导对方的行为朝你希望的方向走，不用傻傻等待，不用忍气吞声。“这样做会让我开心”这个逻辑，能让你得到自己想要的东西，也让对方感到快乐和满足。</li>
<li>情绪来表达感谢，往往比语言更打动人。善于道谢的人，会让别人感到明明是在给你买东西，却比给自己买东西还开心。</li>
</ul>
<p><strong>第二十一章 第二节　眼里有别人才能有自己</strong></p>
<ul>
<li>没有人天生喜欢屈从别人。投诉不是要逼人屈服，而只是想请人遵守规定。所以我们没必要和服务人员对立，也不需要盛气凌人压倒对方。不管你事先知不知道他们的规定，都要先问一遍，让他亲口说出来，因为这会强化对方遵守这些规定的意愿。</li>
</ul>
<p><strong>第二十四章 第一节　“会聊天”不靠信息，靠情绪</strong></p>
<ul>
<li>更何况，人很有意思，你越是逼问，他就越不愿意说；相反，你表现得若无其事，对方反而会更愿意主动分享。换句话说，如果你故意表现得“我不是很好奇，你不一定要回答”，反而会增加对方主动分享的概率。<br>就算最终对方不愿意分享他的情况，你光是表示“我不会逼问你……但如果你想聊，我也很愿意听”，就已经传达出你的关心和体贴了。就算不依靠聊八卦或自我揭露来促进彼此的关系，只要给对方留下好印象，其实就是一种慢慢拉近距离的方法。</li>
<li>从最低层到最高层依次是“家庭”“学校”“饮食”“工作”和“艺术”（泛指音乐、影视、书籍、绘画等各类作品）。</li>
</ul>
<p><strong>第二十五章 第二节　安抚对方内心的小孩</strong></p>
<ul>
<li>父母在进行亲子沟通时就必须意识到，孩子感到委屈的时候，要在第一时间成为他的“安全角”。</li>
<li>而要通过“增强自信”来建立安全感，具体的方法有三个：（1）吐槽吃醋对象；（2）反过来吃对方的醋；（3）把吃醋变成秀恩爱。</li>
<li>所以，鼓励一个人，既不能完全顺着他，也不能过度激烈，而是应该去唤醒他的另一种角色意识，然后再对他进行疏导。这在心理学上叫作“意识唤醒”。</li>
</ul>
<p><strong>第二十六章 第三节　亲密互动的特殊规则</strong></p>
<ul>
<li>因为别人如果只看到优点，就会觉得：“这个人固然好，但跟我总像是隔着一层，感觉不够亲密。”</li>
<li>不用害怕失去形象，事实上这些糗事才能真的拉近彼此的距离。在这方面，心理学家威尔斯（Thomas Ashby Wills）有一个暗黑的发现：很多人其实是通过“向下比较”，来提升自己的幸福感的。面对比自己优秀的人，很容易产生嫉妒跟压力。但是发现别人不如自己，就会更容易产生亲近感和同情心。换句话说，你的缺点跟失败，反而是最适合增加亲密度的话题。</li>
<li>这个故事听起来像是一个笑话，但很多情况下，人的心理真的就是这样：当一件事从“我想要这么做”变成“我被迫要这样做”的时候，人就会失去内在的驱动力。如果这件事回报太少，甚至是费力不讨好，人就会渐渐产生排斥的情绪，最后不愿意再继续</li>
</ul>
<p><strong>第二十七章 Chapter 06　理解用情商表达自己</strong></p>
<ul>
<li>总体原则是“理解他人”和“理解自己”。因为理解他人，所以不会固执于自我视角，有足够的思想弹性，既能够充分理性地跟人沟通，也能够照顾到别人的情绪。因为理解自己，所以能够平等待人，在跟人交流的时候懂分寸知进退，既不会咄咄逼人，也不会失去自己的立场。</li>
</ul>
<p><strong>第二十八章 第一节　思想弹性，决定沟通的可能</strong></p>
<ul>
<li>正因为如此，生活中有很多沟通都是表面的，并没有真的有效交流。有时候，你看到一个人在跟别人叽叽呱呱、你来我往地聊天，但事实上，他从头到尾可能就只是在跟他心中所预设的、所假想的那个对象在说话。可是你要知道，如果你只听到自己想听的，那你就根本没在听。</li>
<li>“因为我不同意，所以我何必懂”，这是拒绝沟通；“即便我不同意，但是我能懂”，这才是好的沟通者。能分清楚“我理解”跟“我同意”的人，都是弹性非常大、能好好说话的人。这样做，既不用跟对方争吵，也能让你的反对听起来更加合情合理。</li>
</ul>
<p><strong>第二十九章 第二节　权利对等，才能享受亲密关系</strong></p>
<ul>
<li>改变，一定要从自己出发，不要妄想改变别人。自我坚定，才能活出自己想要的样子。我们无法改变父母对我们的态度，可是，我们可以改变我们对父母的态度。你会发现，一旦你对父母的态度改变了，其实他们就伤害不到你了。总有一天，你的父母会从你的态度里理解到：“噢！我的孩子已经长大了！”</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>用Git和Gitlab进行协作</title>
    <url>/2019/01/08/%E7%94%A8Git%E5%92%8CGitlab%E8%BF%9B%E8%A1%8C%E5%8D%8F%E4%BD%9C/</url>
    <content><![CDATA[<p>在Gitlab上的远程仓库为每个用户创建分支, 例如dev-xxx<br>本地clone项目以后用fetch命令将远程分支拉到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin dev-xxx:dev-xxx</span><br></pre></td></tr></table></figure>
<p>在本地切换分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout dev-xxx</span><br></pre></td></tr></table></figure>
<p>然后进行开发并提交修改<br>开发完成后提交到远程dev-xxx分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin dev-xxx</span><br></pre></td></tr></table></figure>
<p>之后可以在网页端提交merge request</p>
<p><strong>注意</strong>:  为了确保本地dev-xxx分支和远程仓库master分支一致, 请在每次开发前先更新本地仓库(dev-xxx分支)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout dev-xxx</span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/dev-xxx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>用flask、gunicorn和nginx在centos上部署API</title>
    <url>/2018/06/04/%E7%94%A8flask%E3%80%81gunicorn%E5%92%8Cngix%E5%9C%A8centos%E4%B8%8A%E9%83%A8%E7%BD%B2API/</url>
    <content><![CDATA[<p>最近需要把ICD编码和命名实体识别的API部署在公司外网gpu服务器上，服务器是centos系统的，网上的教程大多数都是基于ubuntu的，于是自己研究了一下，简单说一下步骤吧。</p>
<span id="more"></span>

<ol>
<li>我用的conda，首先创建一个虚拟环境env<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n env python=3.6</span><br><span class="line">source activate env</span><br></pre></td></tr></table></figure></li>
<li>安装flask（如果没有的话）, gunicorn<br><code>pip install flask gunicorn</code></li>
<li>在代码目录中创建一个<code>wsgi.py</code>文件，内容如下<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">	app.run()</span><br></pre></td></tr></table></figure></li>
<li>试着启动一下（可以在screen或者tmux里）<br><code>gunicorn --bind 127.0.0.1:8000 wsgi:app</code></li>
<li>安装nginx<br><code>yum install nginx</code><br>添加一个配置文件<br><code>sudo vim /etc/nginx/conf.d/project.conf</code><br>写入以下内容  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name  your_public_dnsname_here;</span><br><span class="line">	</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://127.0.0.1:8000;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动nginx服务，搞定！<br><code>systemctl start nginx</code></li>
</ol>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Flask</tag>
        <tag>gunicorn</tag>
        <tag>CentOs</tag>
      </tags>
  </entry>
  <entry>
    <title>近阶段的总结和反思</title>
    <url>/2018/06/11/%E8%BF%91%E9%98%B6%E6%AE%B5%E7%9A%84%E6%80%BB%E7%BB%93%E5%92%8C%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<p>创建这个博客也一年多了，其实很长一段时间里并没有很用心地去经营和维护它，从博文的更新数量就可以看出来…我也看了不少人的博客，发现一个现象，很多人在像csdn、博客园之类的网站开的博客能持续地更新下去，而自己用wordpress或者hexo搭建的博客往往只用了一段时间，发表了寥寥几篇博文就遗弃了。我觉得大概是因为只是想体验一下搭建博客这个过程吧，而我呢，一直想写些什么，不论是技术总结，亦或是生活点滴，却总因为这样那样的原因被搁置，惭愧。</p>
<p>转眼已经参加工作五个多月了，好像也渐渐适应了工作的节奏，其实对我来说和大学时代没有太大的区别，要说有的话可能就是少了一些自由度，多了一些压力。学生时代也是有压力的，只不过压力大多来自自己，期望作业、项目做的尽可能完美，期望考试分数尽可能的高。而在工作中，压力来源多了上级和项目。经常会看到一些观点，认为说为老板打工只需要把老板交代的工作做完便罢，但我不以为然，工作是一个付出和回报的过程，这里的回报并不局限于金钱，也包括自身知识、技术、为人处世等等方面的积累，我认为这些方面也很重要。</p>
<p>这段时间以来，每天其实都过的挺充实的，白天在公司上班，晚上回来以后一般会继续工作或者学习一会儿（要看的东西真不少呢），然后玩会儿游戏放松一下。但是总觉得缺了些什么，好像自己一直处于一种被动的状态，例如说今天项目需要我去做一个前端的界面，但是这并不是我的专长，于是我从研究算法跑去研究了一段时间的前端，好不容易捣鼓出一个像样的东西了，自己也挺有成就感的，顺便新点了一个技能树，也许可以成为一个全栈工程师呢:)但是呢，哪有人可以样样都精通呢，术业有专攻，如果把过多的时间放在的别的方向，对自己本来的发展方向并不一定有利。所以我觉得制定一个目标和切实可行的计划是有必要的，在确保在朝着目标前进的同时，如果有闲暇时间，去学习一些别的知识是好的。基于此，我想在这里谈谈我的计划。我目前的方向是自然语言处理，因此便以此为重心。</p>
<ul>
<li>夯实算法基础</li>
<li>跟进前沿技术，尤其是目前在做的项目相关的，包括NER、关系抽取、知识图谱等。看论文采取遍地撒网、重点捕捞的策略</li>
<li>增加代码积累，在公司项目之外争取可以参与或自己开展一些小项目</li>
</ul>
<p>暂时想到以上三点，后续可能再添加，不过我觉得如果能做到我自己就满意啦:)</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
</search>
